.Dd December 2008
.Dt CAT 1

.Sh NAME

.Nm cat
.Nd concatenate and print files

.Sh SYNOPSIS

.Nm cat
.Ar [-u][file ...]

.Sh DESCRIPTION

    The cat utility shall read files in sequence and shall write their
contents to the standard output in the same sequence.

.Sh OPTIONS

    The cat utility shall conform to the Base Definitions volume of IEEE Std
1003.1-2001, Section 12.2, Utility Syntax Guidelines.

    The following option shall be supported:

    -u
        Write bytes from the input file to the standard output without delay
as each is read.

.Sh OPERANDS

    The following operand shall be supported:

    file
        A pathname of an input file. If no file operands are specified, the
standard input shall be used. If a file is '-', the cat utility shall read
from the standard input at that point in the sequence. The cat utility shall
not close and reopen standard input when it is referenced in this way, but
shall accept multiple occurrences of '-' as a file operand.

.Sh STDIN

    The standard input shall be used only if no file operands are specified,
or if a file operand is '-'. See the INPUT FILES section.

.Sh INPUT FILES

    The input files can be any file type.

.Sh ENVIRONMENT VARIABLES

    The following environment variables shall affect the execution of cat:

    LANG
        Provide a default value for the internationalization variables that
are unset or null. (See the Base Definitions volume of IEEE Std 1003.1-2001,
Section 8.2, Internationalization Variables for the precedence of
internationalization variables used to determine the values of locale
categories.)
    LC_ALL
        If set to a non-empty string value, override the values of all the
other internationalization variables.
    LC_CTYPE
        Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single-byte as opposed to multi-byte
characters in arguments).
    LC_MESSAGES
        Determine the locale that should be used to affect the format and
contents of diagnostic messages written to standard error.
    NLSPATH
        [XSI] [Option Start] Determine the location of message catalogs for
the processing of LC_MESSAGES . [Option End]

.Sh ASYNCHRONOUS EVENTS

    Default.

.Sh STDOUT

    The standard output shall contain the sequence of bytes read from the
input files. Nothing else shall be written to the standard output.

.Sh STDERR

    The standard error shall be used only for diagnostic messages.

.Sh OUTPUT FILES

    None.

.Sh EXTENDED DESCRIPTION

    None.

.Sh EXIT STATUS

    The following exit values shall be returned:

     0
        All input files were output successfully.
    >0
        An error occurred.

.Sh CONSEQUENCES OF ERRORS

    Default.

The following sections are informative.
.Sh APPLICATION USAGE

    The -u option has value in prototyping non-blocking reads from FIFOs.
The intent is to support the following sequence:

    mkfifo foo
    cat -u foo > /dev/tty13 &
    cat -u > foo

    It is unspecified whether standard output is or is not buffered in the
default case. This is sometimes of interest when standard output is
associated with a terminal, since buffering may delay the output. The
presence of the -u option guarantees that unbuffered I/O is available. It is
implementation-defined whether the cat utility buffers output if the -u
option is not specified. Traditionally, the -u option is implemented using
the equivalent of the setvbuf() function defined in the System Interfaces
volume of IEEE Std 1003.1-2001.

.Sh EXAMPLES

    The following command:

    cat myfile

    writes the contents of the file myfile to standard output.

    The following command:

    cat doc1 doc2 > doc.all

    concatenates the files doc1 and doc2 and writes the result to doc.all.

    Because of the shell language mechanism used to perform output
redirection, a command such as this:

    cat doc doc.end > doc

    causes the original data in doc to be lost.

    The command:

    cat start - middle - end > file

    when standard input is a terminal, gets two arbitrary pieces of input
from the terminal with a single invocation of cat. Note, however, that if
standard input is a regular file, this would be equivalent to the command:

    cat start - middle /dev/null end > file

    because the entire contents of the file would be consumed by cat the
first time '-' was used as a file operand and an end-of-file condition would
be detected immediately when '-' was referenced the second time.

.Sh RATIONALE

    Historical versions of the cat utility include the options -e, -t, and
-v, which permit the ends of lines, <tab>s, and invisible characters,
respectively, to be rendered visible in the output. The standard developers
omitted these options because they provide too fine a degree of control over
what is made visible, and similar output can be obtained using a command
such as:

    sed -n -e 's/$/$/' -e l pathname

    The -s option was omitted because it corresponds to different functions
in BSD and System V-based systems. The BSD -s option to squeeze blank lines
can be accomplished by the shell script shown in the following example:

    sed -n '
    # Write non-empty lines.
    /./   {
          p
          d
          }
    # Write a single empty line, then look for more empty lines.
    /^$/  p
    # Get next line, discard the held <newline> (empty line),
    # and look for more empty lines.
    :Empty
    /^$/  {
          N
          s/.//
          b Empty
          }
    # Write the non-empty line before going back to search
    # for the first in a set of empty lines.
          p
    '

    The System V -s option to silence error messages can be accomplished by
redirecting the standard error. Note that the BSD documentation for cat uses
the term "blank line" to mean the same as the POSIX "empty line'': a line
consisting only of a <newline>.

    The BSD -n option was omitted because similar functionality can be
obtained from the -n option of the pr utility.

.Sh FUTURE DIRECTIONS

    None.

.Sh SEE ALSO

    more, the System Interfaces volume of IEEE Std 1003.1-2001, setvbuf()

